"""
    identity-provider

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from identity_provider_rest_client.api_client import ApiClient, Endpoint as _Endpoint
from identity_provider_rest_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from identity_provider_rest_client.model.business_exception_model import BusinessExceptionModel
from identity_provider_rest_client.model.http_validation_error import HTTPValidationError
from identity_provider_rest_client.model.server_exception_model import ServerExceptionModel
from identity_provider_rest_client.model.simple_role_dto import SimpleRoleDTO
from identity_provider_rest_client.model.user_in_dto import UserInDTO
from identity_provider_rest_client.model.user_out_dto import UserOutDTO


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_all_roles_roles_get(
            self,
            **kwargs
        ):
            """Get All Roles  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_all_roles_roles_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): [optional] if omitted the server will use the default value of 10
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SimpleRoleDTO]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_all_roles_roles_get = _Endpoint(
            settings={
                'response_type': ([SimpleRoleDTO],),
                'auth': [],
                'endpoint_path': '/roles',
                'operation_id': 'get_all_roles_roles_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                },
                'location_map': {
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_all_roles_roles_get
        )

        def __get_all_roles_roles_role_name_get(
            self,
            role_name,
            **kwargs
        ):
            """Get All Roles  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_all_roles_roles_role_name_get(role_name, async_req=True)
            >>> result = thread.get()

            Args:
                role_name (str):

            Keyword Args:
                limit (int): [optional] if omitted the server will use the default value of 10
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SimpleRoleDTO]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['role_name'] = \
                role_name
            return self.call_with_http_info(**kwargs)

        self.get_all_roles_roles_role_name_get = _Endpoint(
            settings={
                'response_type': ([SimpleRoleDTO],),
                'auth': [],
                'endpoint_path': '/roles/{role_name}',
                'operation_id': 'get_all_roles_roles_role_name_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'role_name',
                    'limit',
                ],
                'required': [
                    'role_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'role_name':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'role_name': 'role_name',
                    'limit': 'limit',
                },
                'location_map': {
                    'role_name': 'path',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_all_roles_roles_role_name_get
        )

        def __get_role_user_external_identifier_roles_get(
            self,
            external_identifier,
            **kwargs
        ):
            """Get Role  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_role_user_external_identifier_roles_get(external_identifier, async_req=True)
            >>> result = thread.get()

            Args:
                external_identifier (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SimpleRoleDTO]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_identifier'] = \
                external_identifier
            return self.call_with_http_info(**kwargs)

        self.get_role_user_external_identifier_roles_get = _Endpoint(
            settings={
                'response_type': ([SimpleRoleDTO],),
                'auth': [],
                'endpoint_path': '/user/{external_identifier}/roles',
                'operation_id': 'get_role_user_external_identifier_roles_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_identifier',
                ],
                'required': [
                    'external_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_identifier':
                        (str,),
                },
                'attribute_map': {
                    'external_identifier': 'external_identifier',
                },
                'location_map': {
                    'external_identifier': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_role_user_external_identifier_roles_get
        )

        def __get_roles_roles_role_name_resource_resource_name_get(
            self,
            role_name,
            resource_name,
            **kwargs
        ):
            """Get Roles  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_roles_roles_role_name_resource_resource_name_get(role_name, resource_name, async_req=True)
            >>> result = thread.get()

            Args:
                role_name (str):
                resource_name (str):

            Keyword Args:
                limit (int): [optional] if omitted the server will use the default value of 10
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SimpleRoleDTO]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['role_name'] = \
                role_name
            kwargs['resource_name'] = \
                resource_name
            return self.call_with_http_info(**kwargs)

        self.get_roles_roles_role_name_resource_resource_name_get = _Endpoint(
            settings={
                'response_type': ([SimpleRoleDTO],),
                'auth': [],
                'endpoint_path': '/roles/{role_name}/resource/{resource_name}',
                'operation_id': 'get_roles_roles_role_name_resource_resource_name_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'role_name',
                    'resource_name',
                    'limit',
                ],
                'required': [
                    'role_name',
                    'resource_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'role_name':
                        (str,),
                    'resource_name':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'role_name': 'role_name',
                    'resource_name': 'resource_name',
                    'limit': 'limit',
                },
                'location_map': {
                    'role_name': 'path',
                    'resource_name': 'path',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_roles_roles_role_name_resource_resource_name_get
        )

        def __get_user_user_external_identifier_get(
            self,
            external_identifier,
            **kwargs
        ):
            """Get User  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_user_user_external_identifier_get(external_identifier, async_req=True)
            >>> result = thread.get()

            Args:
                external_identifier (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserOutDTO
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_identifier'] = \
                external_identifier
            return self.call_with_http_info(**kwargs)

        self.get_user_user_external_identifier_get = _Endpoint(
            settings={
                'response_type': (UserOutDTO,),
                'auth': [],
                'endpoint_path': '/user/{external_identifier}',
                'operation_id': 'get_user_user_external_identifier_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_identifier',
                ],
                'required': [
                    'external_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_identifier':
                        (str,),
                },
                'attribute_map': {
                    'external_identifier': 'external_identifier',
                },
                'location_map': {
                    'external_identifier': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_user_user_external_identifier_get
        )

        def __post_user_user_external_identifier_post(
            self,
            external_identifier,
            user_in_dto,
            **kwargs
        ):
            """Post User  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_user_user_external_identifier_post(external_identifier, user_in_dto, async_req=True)
            >>> result = thread.get()

            Args:
                external_identifier (str):
                user_in_dto (UserInDTO):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserOutDTO
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_identifier'] = \
                external_identifier
            kwargs['user_in_dto'] = \
                user_in_dto
            return self.call_with_http_info(**kwargs)

        self.post_user_user_external_identifier_post = _Endpoint(
            settings={
                'response_type': (UserOutDTO,),
                'auth': [],
                'endpoint_path': '/user/{external_identifier}',
                'operation_id': 'post_user_user_external_identifier_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_identifier',
                    'user_in_dto',
                ],
                'required': [
                    'external_identifier',
                    'user_in_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_identifier':
                        (str,),
                    'user_in_dto':
                        (UserInDTO,),
                },
                'attribute_map': {
                    'external_identifier': 'external_identifier',
                },
                'location_map': {
                    'external_identifier': 'path',
                    'user_in_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_user_user_external_identifier_post
        )

        def __put_role_roles_put(
            self,
            simple_role_dto,
            **kwargs
        ):
            """Put Role  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.put_role_roles_put(simple_role_dto, async_req=True)
            >>> result = thread.get()

            Args:
                simple_role_dto (SimpleRoleDTO):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SimpleRoleDTO
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['simple_role_dto'] = \
                simple_role_dto
            return self.call_with_http_info(**kwargs)

        self.put_role_roles_put = _Endpoint(
            settings={
                'response_type': (SimpleRoleDTO,),
                'auth': [],
                'endpoint_path': '/roles',
                'operation_id': 'put_role_roles_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'simple_role_dto',
                ],
                'required': [
                    'simple_role_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'simple_role_dto':
                        (SimpleRoleDTO,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'simple_role_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__put_role_roles_put
        )

        def __put_user_user_external_identifier_put(
            self,
            external_identifier,
            user_in_dto,
            **kwargs
        ):
            """Put User  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.put_user_user_external_identifier_put(external_identifier, user_in_dto, async_req=True)
            >>> result = thread.get()

            Args:
                external_identifier (str):
                user_in_dto (UserInDTO):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserOutDTO
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_identifier'] = \
                external_identifier
            kwargs['user_in_dto'] = \
                user_in_dto
            return self.call_with_http_info(**kwargs)

        self.put_user_user_external_identifier_put = _Endpoint(
            settings={
                'response_type': (UserOutDTO,),
                'auth': [],
                'endpoint_path': '/user/{external_identifier}',
                'operation_id': 'put_user_user_external_identifier_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_identifier',
                    'user_in_dto',
                ],
                'required': [
                    'external_identifier',
                    'user_in_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_identifier':
                        (str,),
                    'user_in_dto':
                        (UserInDTO,),
                },
                'attribute_map': {
                    'external_identifier': 'external_identifier',
                },
                'location_map': {
                    'external_identifier': 'path',
                    'user_in_dto': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__put_user_user_external_identifier_put
        )
